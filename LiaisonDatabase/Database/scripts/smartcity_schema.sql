-- Smartcity Database Schema
--
-- MySQL Script generated by MySQL Workbench
-- Thu Apr 20 09:52:34 2017
-- Model: Smartcity    Version: 1.0
-- Author: Loan Lassalle
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema smartcity
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `smartcity` ;

-- -----------------------------------------------------
-- Schema smartcity
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `smartcity` DEFAULT CHARACTER SET latin1 COLLATE latin1_general_ci ;
USE `smartcity` ;

-- -----------------------------------------------------
-- Table `smartcity`.`RubriqueParent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`RubriqueParent` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`RubriqueParent` (
  `idRubriqueParent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomRubriqueParent` VARCHAR(20) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idRubriqueParent`),
  UNIQUE INDEX `idRubriqueParent_UNIQUE` (`idRubriqueParent` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`RubriqueEnfant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`RubriqueEnfant` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`RubriqueEnfant` (
  `idRubriqueEnfant` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idRubriqueParent` INT UNSIGNED NOT NULL,
  `nomRubriqueEnfant` VARCHAR(20) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idRubriqueEnfant`),
  UNIQUE INDEX `idRubriqueEnfant_UNIQUE` (`idRubriqueEnfant` ASC),
  INDEX `fk_RubriqueEnfant_RubriqueParent_idx` (`idRubriqueParent` ASC),
  CONSTRAINT `fk_RubriqueEnfant_RubriqueParent`
    FOREIGN KEY (`idRubriqueParent`)
    REFERENCES `smartcity`.`RubriqueParent` (`idRubriqueParent`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Priorite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Priorite` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Priorite` (
  `idPriorite` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomPriorite` VARCHAR(45) NOT NULL,
  `niveau` TINYINT UNSIGNED NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idPriorite`),
  UNIQUE INDEX `idPriorite_UNIQUE` (`idPriorite` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Statut`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Statut` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Statut` (
  `idStatut` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomStatut` VARCHAR(45) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idStatut`),
  UNIQUE INDEX `idStatut_UNIQUE` (`idStatut` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Rue`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Rue` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Rue` (
  `idRue` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomRue` VARCHAR(45) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idRue`),
  UNIQUE INDEX `idRue_UNIQUE` (`idRue` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Npa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Npa` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Npa` (
  `idNpa` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `numeroNpa` VARCHAR(4) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idNpa`),
  UNIQUE INDEX `idNpa_UNIQUE` (`idNpa` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Adresse`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Adresse` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Adresse` (
  `idAdresse` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idRue` INT UNSIGNED NOT NULL,
  `numeroDeRue` VARCHAR(4) NOT NULL,
  `idNpa` INT UNSIGNED NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idAdresse`),
  UNIQUE INDEX `idAdresse_UNIQUE` (`idAdresse` ASC),
  INDEX `fk_Adresse_Rue1_idx` (`idRue` ASC),
  INDEX `fk_Adresse_Npa1_idx` (`idNpa` ASC),
  CONSTRAINT `fk_Adresse_Rue1`
    FOREIGN KEY (`idRue`)
    REFERENCES `smartcity`.`Rue` (`idRue`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Adresse_Npa1`
    FOREIGN KEY (`idNpa`)
    REFERENCES `smartcity`.`Npa` (`idNpa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`TitreCivil`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`TitreCivil` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`TitreCivil` (
  `idTitreCivil` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `titre` VARCHAR(45) NOT NULL,
  `abreviation` VARCHAR(6) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idTitreCivil`),
  UNIQUE INDEX `idTitreCivil_UNIQUE` (`idTitreCivil` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Nationalite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Nationalite` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Nationalite` (
  `idNationalite` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomNationalite` VARCHAR(45) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idNationalite`),
  UNIQUE INDEX `idNationalite_UNIQUE` (`idNationalite` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Sexe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Sexe` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Sexe` (
  `idSexe` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nomSexe` VARCHAR(45) NOT NULL,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idSexe`),
  UNIQUE INDEX `idSexe_UNIQUE` (`idSexe` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Utilisateur`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Utilisateur` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Utilisateur` (
  `idUtilisateur` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `personnePhysique` TINYINT(1) NOT NULL DEFAULT 1,
  `avs` VARCHAR(16) NULL,
  `idTitreCivil` INT UNSIGNED NOT NULL,
  `nomUtilisateur` VARCHAR(90) NOT NULL,
  `prenom` VARCHAR(90) NULL,
  `dateDeNaissance` TIMESTAMP NULL,
  `idSexe` INT UNSIGNED NULL,
  `idNationalite` INT UNSIGNED NULL,
  `idAdresse` INT UNSIGNED NOT NULL,
  `email` VARCHAR(254) NOT NULL,
  `pseudo` VARCHAR(90) NOT NULL,
  `motDePasse` VARCHAR(32) NOT NULL,
  `sel` VARCHAR(32) NOT NULL,
  `creation` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idUtilisateur`),
  UNIQUE INDEX `idUtilisateur_UNIQUE` (`idUtilisateur` ASC),
  INDEX `fk_Utilisateur_Adresse1_idx` (`idAdresse` ASC),
  INDEX `fk_Utilisateur_TitreCivil1_idx` (`idTitreCivil` ASC),
  INDEX `fk_Utilisateur_Nationalite1_idx` (`idNationalite` ASC),
  INDEX `fk_Utilisateur_Sexe1_idx` (`idSexe` ASC),
  CONSTRAINT `fk_Utilisateur_Adresse1`
    FOREIGN KEY (`idAdresse`)
    REFERENCES `smartcity`.`Adresse` (`idAdresse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Utilisateur_TitreCivil1`
    FOREIGN KEY (`idTitreCivil`)
    REFERENCES `smartcity`.`TitreCivil` (`idTitreCivil`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Utilisateur_Nationalite1`
    FOREIGN KEY (`idNationalite`)
    REFERENCES `smartcity`.`Nationalite` (`idNationalite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Utilisateur_Sexe1`
    FOREIGN KEY (`idSexe`)
    REFERENCES `smartcity`.`Sexe` (`idSexe`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Evenement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Evenement` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Evenement` (
  `idEvenement` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idRubriqueEnfant` INT UNSIGNED NOT NULL,
  `idUtilisateur` INT UNSIGNED NOT NULL,
  `nomEvenement` VARCHAR(90) NOT NULL,
  `idAdresse` INT UNSIGNED NULL,
  `latitude` DOUBLE NULL,
  `longitude` DOUBLE NULL,
  `debut` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fin` TIMESTAMP NULL,
  `details` TEXT NULL,
  `idPriorite` INT UNSIGNED NOT NULL,
  `idStatut` INT UNSIGNED NOT NULL,
  `creation` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idEvenement`),
  INDEX `fk_Evenement_RubriqueEnfant1_idx` (`idRubriqueEnfant` ASC),
  INDEX `fk_Evenement_Priorite1_idx` (`idPriorite` ASC),
  INDEX `fk_Evenement_Statut1_idx` (`idStatut` ASC),
  INDEX `fk_Evenement_Utilisateur1_idx` (`idUtilisateur` ASC),
  UNIQUE INDEX `idEvenement_UNIQUE` (`idEvenement` ASC),
  INDEX `fk_Evenement_Adresse1_idx` (`idAdresse` ASC),
  CONSTRAINT `fk_Evenement_RubriqueEnfant1`
    FOREIGN KEY (`idRubriqueEnfant`)
    REFERENCES `smartcity`.`RubriqueEnfant` (`idRubriqueEnfant`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Evenement_Priorite1`
    FOREIGN KEY (`idPriorite`)
    REFERENCES `smartcity`.`Priorite` (`idPriorite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Evenement_Statut1`
    FOREIGN KEY (`idStatut`)
    REFERENCES `smartcity`.`Statut` (`idStatut`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Evenement_Utilisateur1`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `smartcity`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Evenement_Adresse1`
    FOREIGN KEY (`idAdresse`)
    REFERENCES `smartcity`.`Adresse` (`idAdresse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Commentaire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Commentaire` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Commentaire` (
  `idEvenement` INT UNSIGNED NOT NULL,
  `idUtilisateur` INT UNSIGNED NOT NULL,
  `commentaire` TEXT NOT NULL,
  `creation` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `derniereMiseAJour` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idEvenement`, `idUtilisateur`),
  INDEX `fk_Commentaire_Evenement1_idx` (`idEvenement` ASC),
  INDEX `fk_Commentaire_Utilisateur1_idx` (`idUtilisateur` ASC),
  CONSTRAINT `fk_Commentaire_Utilisateur1`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `smartcity`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Commentaire_Evenement1`
    FOREIGN KEY (`idEvenement`)
    REFERENCES `smartcity`.`Evenement` (`idEvenement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `smartcity`.`Confiance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `smartcity`.`Confiance` ;

CREATE TABLE IF NOT EXISTS `smartcity`.`Confiance` (
  `idUtilisateur` INT UNSIGNED NOT NULL,
  `idRubriqueEnfant` INT UNSIGNED NOT NULL,
  `creation` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idUtilisateur`, `idRubriqueEnfant`),
  INDEX `fk_Confiance_RubriqueEnfant1_idx` (`idRubriqueEnfant` ASC),
  INDEX `fk_Confiance_Utilisateur1_idx` (`idUtilisateur` ASC),
  CONSTRAINT `fk_Confiance_Utilisateur1`
    FOREIGN KEY (`idUtilisateur`)
    REFERENCES `smartcity`.`Utilisateur` (`idUtilisateur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Confiance_RubriqueEnfant1`
    FOREIGN KEY (`idRubriqueEnfant`)
    REFERENCES `smartcity`.`RubriqueEnfant` (`idRubriqueEnfant`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `smartcity` ;

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`detailsDesEvenements`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`detailsDesEvenements` (`idEvenement` INT, `nomEvenement` INT, `nomRubriqueEnfant` INT, `nomRubriqueParent` INT, `nomRue` INT, `numeroDeRue` INT, `numeroNpa` INT, `latitude` INT, `longitude` INT, `debut` INT, `fin` INT, `details` INT, `nomPriorite` INT, `niveau` INT, `nomStatut` INT, `idUtilisateur` INT, `pseudo` INT, `creation` INT);

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`utilisateursDeConfiance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`utilisateursDeConfiance` (`idRubriqueEnfant` INT, `nomRubriqueEnfant` INT, `nomRubriqueParent` INT, `idUtilisateur` INT, `personnePhysique` INT, `abreviation` INT, `nomUtilisateur` INT, `prenom` INT, `email` INT, `pseudo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`rubriquesEnfantsParents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`rubriquesEnfantsParents` (`idRubriqueEnfant` INT, `nomRubriqueEnfant` INT, `nomRubriqueParent` INT);

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`evenementsUtilisateurs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`evenementsUtilisateurs` (`idEvenement` INT, `nomEvenement` INT, `nomRubriqueEnfant` INT, `nomRubriqueParent` INT, `nomRue` INT, `numeroDeRue` INT, `numeroNpa` INT, `debut` INT, `fin` INT, `nomPriorite` INT, `niveau` INT, `nomStatut` INT, `idUtilisateur` INT, `pseudo` INT, `commentaire` INT, `creation` INT, `derniereMiseAJour` INT);

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`detailsUtilisateurs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`detailsUtilisateurs` (`idutilisateur` INT, `AVS` INT, `personnePhysique` INT, `abreviation` INT, `nomUtilisateur` INT, `prenom` INT, `dateDeNaissance` INT, `nomSexe` INT, `nomNationalite` INT, `nomRue` INT, `numeroDeRue` INT, `numeroNpa` INT, `email` INT, `pseudo` INT, `creation` INT);

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`detailsAdresses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`detailsAdresses` (`idAdresse` INT, `nomRue` INT, `numeroDeRue` INT, `numeroNpa` INT);

-- -----------------------------------------------------
-- Placeholder table for view `smartcity`.`pseudosMotsDePasse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `smartcity`.`pseudosMotsDePasse` (`pseudo` INT, `motDePasse` INT, `sel` INT, `creation` INT, `derniereMiseAJour` INT);

-- -----------------------------------------------------
-- View `smartcity`.`detailsDesEvenements`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`detailsDesEvenements` ;
DROP TABLE IF EXISTS `smartcity`.`detailsDesEvenements`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `detailsDesEvenements` AS
	SELECT
		eve.idEvenement,
        eve.nomEvenement,
		re.nomRubriqueEnfant,
        rp.nomRubriqueParent,
        rue.nomRue,
        adr.numeroDeRue,
        npa.numeroNpa,
        eve.latitude,
        eve.longitude,
        eve.debut,
        eve.fin,
        eve.details,
        pri.nomPriorite,
        pri.niveau,
        sta.nomStatut,
        uti.idUtilisateur,
        uti.pseudo,
        eve.creation
	FROM
		Evenement AS eve
			INNER JOIN
		RubriqueEnfant AS re ON eve.idRubriqueEnfant = re.idRubriqueEnfant
			INNER JOIN
		RubriqueParent AS rp ON re.idRubriqueParent = rp.idRubriqueParent
			INNER JOIN
		Adresse AS adr ON eve.idAdresse = adr.idAdresse
			INNER JOIN
		Rue AS rue ON adr.idRue = rue.idRue
			INNER JOIN
		NPA AS npa ON adr.idNpa = npa.idNpa
			INNER JOIN
		Priorite AS pri ON eve.idPriorite = pri.idPriorite
			INNER JOIN
		Statut AS sta ON eve.idStatut = sta.idStatut
			INNER JOIN
		Utilisateur AS uti ON eve.idUtilisateur = uti.idUtilisateur;

-- -----------------------------------------------------
-- View `smartcity`.`utilisateursDeConfiance`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`utilisateursDeConfiance` ;
DROP TABLE IF EXISTS `smartcity`.`utilisateursDeConfiance`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `utilisateursDeConfiance` AS
	SELECT
		re.idRubriqueEnfant,
        re.nomRubriqueEnfant,
		rp.nomRubriqueParent,
		uti.idUtilisateur,
        uti.personnePhysique,
        tc.abreviation,
		uti.nomUtilisateur,
        uti.prenom,
        uti.email,
        uti.pseudo
	FROM
		Confiance AS con
			INNER JOIN
		Utilisateur AS uti ON con.idUtilisateur = uti.idUtilisateur
			INNER JOIN
		RubriqueEnfant AS re ON con.idRubriqueEnfant = re.idRubriqueEnfant
			INNER JOIN
		RubriqueParent AS rp ON re.idRubriqueParent = rp.idRubriqueParent
			INNER JOIN
		TitreCivil AS tc ON uti.idTitreCivil = tc.idTitreCivil;

-- -----------------------------------------------------
-- View `smartcity`.`rubriquesEnfantsParents`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`rubriquesEnfantsParents` ;
DROP TABLE IF EXISTS `smartcity`.`rubriquesEnfantsParents`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `rubriquesEnfantsParents` AS
	SELECT
		re.idRubriqueEnfant,
        re.nomRubriqueEnfant,
		rp.nomRubriqueParent
	FROM RubriqueEnfant AS re
		INNER JOIN
	RubriqueParent AS rp ON re.idRubriqueParent = rp.idRubriqueParent;

-- -----------------------------------------------------
-- View `smartcity`.`evenementsUtilisateurs`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`evenementsUtilisateurs` ;
DROP TABLE IF EXISTS `smartcity`.`evenementsUtilisateurs`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `evenementsUtilisateurs` AS
	SELECT
		eve.idEvenement,
        eve.nomEvenement,
        re.nomRubriqueEnfant,
		rp.nomRubriqueParent,
        rue.nomRue,
        adr.numeroDeRue,
        npa.numeroNpa,
        eve.debut,
        eve.fin,
        pri.nomPriorite,
        pri.niveau,
        sta.nomStatut,
        uti.idUtilisateur,
        uti.pseudo,
        com.commentaire,
        com.creation,
        com.derniereMiseAJour
	FROM
		Commentaire AS com
			INNER JOIN
		Evenement AS eve ON com.idEvenement = eve.idEvenement
			INNER JOIN
		Utilisateur AS uti ON com.idUtilisateur = uti.idUtilisateur
			INNER JOIN
		RubriqueEnfant AS re ON eve.idRubriqueEnfant = re.idRubriqueEnfant
			INNER JOIN
		RubriqueParent AS rp ON re.idRubriqueParent = rp.idRubriqueParent
			INNER JOIN
		Adresse AS adr ON eve.idAdresse = adr.idAdresse
			INNER JOIN
		Rue AS rue ON adr.idRue = rue.idRue
			INNER JOIN
		NPA AS npa ON adr.idNpa = npa.idNpa
			INNER JOIN
		Priorite AS pri ON eve.idPriorite = pri.idPriorite
			INNER JOIN
		Statut AS sta ON eve.idStatut = sta.idStatut;

-- -----------------------------------------------------
-- View `smartcity`.`detailsUtilisateurs`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`detailsUtilisateurs` ;
DROP TABLE IF EXISTS `smartcity`.`detailsUtilisateurs`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `detailsUtilisateurs` AS
	SELECT
		uti.idutilisateur,
        uti.AVS,
        uti.personnePhysique,
        tc.abreviation,
        uti.nomUtilisateur,
        uti.prenom,
        uti.dateDeNaissance,
        sex.nomSexe,
        nat.nomNationalite,
        rue.nomRue,
        adr.numeroDeRue,
        npa.numeroNpa,
        uti.email,
        uti.pseudo,
        uti.creation
	FROM
		Utilisateur AS uti
			INNER JOIN
		TitreCivil AS tc ON uti.idTitreCivil = tc.idTitreCivil
			INNER JOIN
		Sexe AS sex ON uti.idSexe = sex.idSexe
			INNER JOIN
		Nationalite AS nat ON uti.idNationalite = nat.idNationalite
			INNER JOIN
		Adresse AS adr ON uti.idAdresse = adr.idAdresse
			INNER JOIN
		Rue AS rue ON adr.idRue = rue.idRue
			INNER JOIN
		NPA AS npa ON adr.idNpa = npa.idNpa;

-- -----------------------------------------------------
-- View `smartcity`.`detailsAdresses`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`detailsAdresses` ;
DROP TABLE IF EXISTS `smartcity`.`detailsAdresses`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `detailsAdresses` AS
	SELECT
		adr.idAdresse,
        rue.nomRue,
        adr.numeroDeRue,
        npa.numeroNpa
	FROM
		Adresse AS adr
			INNER JOIN
		Rue AS rue ON adr.idRue = rue.idRue
			INNER JOIN
        NPA AS npa ON adr.idNpa = npa.idNpa;

-- -----------------------------------------------------
-- View `smartcity`.`pseudosMotsDePasse`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `smartcity`.`pseudosMotsDePasse` ;
DROP TABLE IF EXISTS `smartcity`.`pseudosMotsDePasse`;
USE `smartcity`;
CREATE  OR REPLACE VIEW `pseudosMotsDePasse` AS
	SELECT
		uti.pseudo,
        uti.motDePasse,
        uti.sel,
        uti.creation,
        uti.derniereMiseAJour
	FROM Utilisateur AS uti;
USE `smartcity`;

DELIMITER $$

USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`RubriqueParent_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`RubriqueParent_BEFORE_INSERT` BEFORE INSERT ON `RubriqueParent` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`RubriqueParent_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`RubriqueParent_BEFORE_UPDATE` BEFORE UPDATE ON `RubriqueParent` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`RubriqueEnfant_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`RubriqueEnfant_BEFORE_INSERT` BEFORE INSERT ON `RubriqueEnfant` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`RubriqueEnfant_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`RubriqueEnfant_BEFORE_UPDATE` BEFORE UPDATE ON `RubriqueEnfant` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Priorite_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Priorite_BEFORE_INSERT` BEFORE INSERT ON `Priorite` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Priorite_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Priorite_BEFORE_UPDATE` BEFORE UPDATE ON `Priorite` FOR EACH ROW
BEGIN    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Statut_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Statut_BEFORE_INSERT` BEFORE INSERT ON `Statut` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Statut_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Statut_BEFORE_UPDATE` BEFORE UPDATE ON `Statut` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Rue_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Rue_BEFORE_INSERT` BEFORE INSERT ON `Rue` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'Value of derniereMiseAJour is not in range';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Rue_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Rue_BEFORE_UPDATE` BEFORE UPDATE ON `Rue` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'Value of derniereMiseAJour is not in range';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Npa_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Npa_BEFORE_INSERT` BEFORE INSERT ON `Npa` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.numeroNpa NOT RLIKE '[0-9]')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'numeroNpa n\'est pas un nombre';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Npa_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Npa_BEFORE_UPDATE` BEFORE UPDATE ON `Npa` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.numeroNpa NOT RLIKE '[0-9]')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'numeroNpa n\'est pas un nombre';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Adresse_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Adresse_BEFORE_INSERT` BEFORE INSERT ON `Adresse` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.numeroDeRue NOT RLIKE '[0-9]')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'numeroDeRue n\'est pas un nombre';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Adresse_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Adresse_BEFORE_UPDATE` BEFORE UPDATE ON `Adresse` FOR EACH ROW
BEGIN
	IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.numeroDeRue NOT RLIKE '[0-9]')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'numeroDeRue n\'est pas un nombre';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`TitreCivil_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`TitreCivil_BEFORE_INSERT` BEFORE INSERT ON `TitreCivil` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`TitreCivil_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`TitreCivil_BEFORE_UPDATE` BEFORE UPDATE ON `TitreCivil` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Nationalite_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Nationalite_BEFORE_INSERT` BEFORE INSERT ON `Nationalite` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Nationalite_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Nationalite_BEFORE_UPDATE` BEFORE UPDATE ON `Nationalite` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Sexe_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Sexe_BEFORE_INSERT` BEFORE INSERT ON `Sexe` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Sexe_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Sexe_BEFORE_UPDATE` BEFORE UPDATE ON `Sexe` FOR EACH ROW
BEGIN
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Utilisateur_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Utilisateur_BEFORE_INSERT` BEFORE INSERT ON `Utilisateur` FOR EACH ROW
BEGIN
	IF (NEW.personnePhysique AND (NEW.avs IS NULL OR NEW.prenom IS NULL OR NEW.dateDeNaissance IS NULL OR NEW.idSexe IS NULL OR NEW.idNationalite IS NULL))
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'personnePhysique est VRAI mais avs, prenom, dateDeNaissance, idSexe ou idNationalite sont NULL';
	ELSEIF (NOT(NEW.personnePhysique) AND (NEW.avs IS NOT NULL OR NEW.prenom IS NOT NULL OR NEW.dateDeNaissance IS NOT NULL OR NEW.idSexe IS NOT NULL OR NEW.idNationalite IS NOT NULL))
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'personnePhysique est FAUX mais avs, prenom, dateDeNaissance, idSexe ou idNationalite sont NON NULL';    
	END IF;
    
    IF (NEW.creation < '1970-01-01 00:00:01' AND NEW.creation > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.creation = CURRENT_TIMESTAMP;
	END IF;
    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
    IF (NEW.dateDeNaissance < '1970-01-01 00:00:01' AND NEW.dateDeNaissance > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'dateDeNaissance n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.dateDeNaissance = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Utilisateur_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Utilisateur_BEFORE_UPDATE` BEFORE UPDATE ON `Utilisateur` FOR EACH ROW
BEGIN
	IF (NEW.personnePhysique AND (NEW.avs IS NULL OR NEW.prenom IS NULL OR NEW.dateDeNaissance IS NULL OR NEW.idSexe IS NULL))
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'personnePhysique est VRAI mais avs, prenom, dateDeNaissance ou idSexe sont NULL';
	ELSEIF (NOT(NEW.personnePhysique) AND (NEW.avs IS NOT NULL OR NEW.prenom IS NOT NULL OR NEW.dateDeNaissance IS NOT NULL OR NEW.idSexe IS NOT NULL OR NEW.idNationalite IS NOT NULL))
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'personnePhysique est FAUX mais avs, prenom, dateDeNaissance ou idSexe sont NON NULL';    
	END IF;
    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.creation <> OLD.creation)
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation ne peut pas être modifiée';
	END IF;
    
    IF (NEW.dateDeNaissance < '1970-01-01 00:00:01' AND NEW.dateDeNaissance > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'dateDeNaissance n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.dateDeNaissance = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Evenement_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Evenement_BEFORE_INSERT` BEFORE INSERT ON `Evenement` FOR EACH ROW
BEGIN
	IF (NEW.idAdresse IS NULL AND (NEW.latitude IS NULL OR NEW.longitude IS NULL))
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'idAdresse ou latitude et longitude sont NULL';
	END IF;
    
    IF (NEW.creation < '1970-01-01 00:00:01' AND NEW.creation > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.creation = CURRENT_TIMESTAMP;
	END IF;
    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
    IF (NEW.debut = NEW.fin)
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'debut égal à fin';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Evenement_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Evenement_BEFORE_UPDATE` BEFORE UPDATE ON `Evenement` FOR EACH ROW
BEGIN
	IF (NEW.idAdresse IS NULL AND (NEW.latitude IS NULL OR NEW.longitude IS NULL))
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'idAdresse ou latitude et longitude sont NULL';
	END IF;
    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.creation <> OLD.creation)
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation ne peut pas être modifiée';
	END IF;
    
    IF (NEW.debut = NEW.fin OR OLD.debut = NEW.fin OR NEW.debut = OLD.fin OR OLD.debut = OLD.fin)
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'debut égal à fin';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Commentaire_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Commentaire_BEFORE_INSERT` BEFORE INSERT ON `Commentaire` FOR EACH ROW
BEGIN
    IF (NEW.creation < '1970-01-01 00:00:01' AND NEW.creation > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.creation = CURRENT_TIMESTAMP;
	END IF;
    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Commentaire_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Commentaire_BEFORE_UPDATE` BEFORE UPDATE ON `Commentaire` FOR EACH ROW
BEGIN    
    IF (NEW.derniereMiseAJour < '1970-01-01 00:00:01' AND NEW.derniereMiseAJour > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'derniereMiseAJour n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.derniereMiseAJour = CURRENT_TIMESTAMP;
	END IF;
    
	IF (NEW.creation <> OLD.creation)
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation ne peut pas être modifiée';
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Confiance_BEFORE_INSERT` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Confiance_BEFORE_INSERT` BEFORE INSERT ON `Confiance` FOR EACH ROW
BEGIN
	IF (NEW.creation < '1970-01-01 00:00:01' AND NEW.creation > '2038-01-19 03:14:07')
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation n\'est pas dans l\'intervalle de temps';
	ELSE
		SET NEW.creation = CURRENT_TIMESTAMP;
	END IF;
END$$


USE `smartcity`$$
DROP TRIGGER IF EXISTS `smartcity`.`Confiance_BEFORE_UPDATE` $$
USE `smartcity`$$
CREATE DEFINER = CURRENT_USER TRIGGER `smartcity`.`Confiance_BEFORE_UPDATE` BEFORE UPDATE ON `Confiance` FOR EACH ROW
BEGIN
	IF (NEW.creation <> OLD.creation)
    THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'creation ne peut pas être modifiée';
	END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
